//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@allow('all', true)
model Tool {
  id              String           @id() @default(uuid())
  name            String
  type            String
  description     String?
  isActive        Boolean
  recentActivitys RecentActivity[] @relation("tool")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Download {
  id        String   @id() @default(uuid())
  mediaUrl  String
  mediaType String
  sourceUrl String?
  title     String?
  status    String
  userId    String
  user      User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model HashtagSet {
  id                  String               @id() @default(uuid())
  name                String
  description         String?
  userId              String
  user                User?                @relation(fields: [userId], references: [id], name: "user")
  hashtagCombinations HashtagCombination[] @relation("hashtagSet")
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now()) @updatedAt()
}

/// @@allow('all', true)
model HashtagCombination {
  id           String      @id() @default(uuid())
  hashtags     String
  count        Float
  hashtagSetId String
  hashtagSet   HashtagSet? @relation(fields: [hashtagSetId], references: [id], name: "hashtagSet")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt()
}

/// @@allow('all', true)
model RecentActivity {
  id           String   @id() @default(uuid())
  sourceUrl    String?
  activityType String
  status       String
  userId       String
  user         User?    @relation(fields: [userId], references: [id], name: "user")
  toolId       String
  tool         Tool?    @relation(fields: [toolId], references: [id], name: "tool")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt()
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id              String           @id() @default(uuid())
  name            String?
  email           String?          @unique()
  pictureUrl      String?          @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation String?
  emailVerified   Boolean?
  status          UserStatus       @default(VERIFIED)
  globalRole      String           @default("USER")
  /// @password
  /// @omit
  password        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt()
  accounts        Account[]
  sessions        Session[]
  downloads       Download[]       @relation("user")
  hashtagSets     HashtagSet[]     @relation("user")
  recentActivitys RecentActivity[] @relation("user")
}

/// @@allow('all', auth().id == user.id)
model Account {
  id                       String  @id() @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

/// @@allow('all', auth().id == user.id)
model Session {
  id           String   @id() @default(uuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
